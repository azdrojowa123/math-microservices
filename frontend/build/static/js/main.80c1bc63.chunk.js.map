{
  "version": 3,
  "sources": [
    "pages/survival-curve/StepLineChart.tsx",
    "services/survivalCurveService.ts",
    "pages/SnackbarContentWrapper.tsx",
    "pages/survival-curve/ResultsTable.tsx",
    "pages/survival-curve/CsvSurvivalCurve.tsx",
    "pages/survival-curve/AddingTestingPersonForm.tsx",
    "pages/survival-curve/SurvivalCurveCalc.tsx",
    "pages/startingPages/LandingPage.tsx",
    "pages/startingPages/MainPage.tsx",
    "services/logisticRegressionService.ts",
    "pages/logistic-regression/CsvRegression.tsx",
    "pages/logistic-regression/AddTestCase.tsx",
    "pages/logistic-regression/LogisticRegressionCalc.tsx",
    "App.tsx",
    "reportWebVitals.ts",
    "index.tsx"
  ],
  "names": [
    "StepLineChart",
    "console",
    "log",
    "this",
    "props",
    "data",
    "id",
    "dataSource",
    "title",
    "type",
    "argumentField",
    "visible",
    "valueField",
    "name",
    "color",
    "verticalAlignment",
    "horizontalAlignment",
    "enabled",
    "Component",
    "survivalCurveService",
    "survivalResults",
    "periods",
    "fetch",
    "method",
    "mode",
    "headers",
    "body",
    "JSON",
    "stringify",
    "checkCSVData",
    "survivalResultsCSV",
    "variantIcon",
    "success",
    "CheckCircleIcon",
    "warning",
    "WarningIcon",
    "error",
    "ErrorIcon",
    "info",
    "InfoIcon",
    "useStyles",
    "makeStyles",
    "theme",
    "backgroundColor",
    "palette",
    "main",
    "snackbarWidth",
    "width",
    "fontSize",
    "icon",
    "iconVariant",
    "opacity",
    "marginRight",
    "message",
    "display",
    "alignItems",
    "SnackbarContentWrapper",
    "onClose",
    "variant",
    "other",
    "Icon",
    "classes",
    "SnackbarContent",
    "className",
    "classNames",
    "action",
    "IconButton",
    "onClick",
    "ResultsTable",
    "TableContainer",
    "component",
    "Paper",
    "Table",
    "TableHead",
    "TableRow",
    "TableCell",
    "align",
    "TableBody",
    "map",
    "row",
    "scope",
    "periodNumber",
    "quantity",
    "failures",
    "survivalProbability",
    "estimatorKM",
    "button",
    "textAlign",
    "background",
    "marginTop",
    "marginBottom",
    "height",
    "form",
    "CsvSurvivalCurve",
    "submitData",
    "useState",
    "csvFile",
    "setCsvFile",
    "disableCheck",
    "setDisableCheck",
    "disableSubmit",
    "setDisableSubmit",
    "snackbarMsg",
    "setSnackbarMsg",
    "service",
    "useEffect",
    "undefined",
    "submit",
    "a",
    "then",
    "res",
    "ok",
    "json",
    "text",
    "errorMsg",
    "catch",
    "handleClose",
    "isNumber",
    "value",
    "isNaN",
    "Number",
    "toString",
    "Grid",
    "container",
    "direction",
    "spacing",
    "item",
    "Box",
    "borderRadius",
    "Typography",
    "List",
    "ListItem",
    "ListItemIcon",
    "ListItemText",
    "primary",
    "Input",
    "inputProps",
    "accept",
    "onChange",
    "event",
    "file",
    "target",
    "files",
    "reader",
    "FileReader",
    "dataSet",
    "onload",
    "e",
    "result",
    "rows",
    "slice",
    "indexOf",
    "split",
    "resultFromFile",
    "delim",
    "isNumeric",
    "forEach",
    "values",
    "checkIfResultsNumbers",
    "push",
    "readAsText",
    "Button",
    "disabled",
    "Promise",
    "reject",
    "statusText",
    "_",
    "Snackbar",
    "anchorOrigin",
    "vertical",
    "horizontal",
    "open",
    "autoHideDuration",
    "wrapper",
    "justifyContent",
    "AddingTestingPersonForm",
    "adding",
    "deleting",
    "occurrenceArray",
    "Array",
    "from",
    "keys",
    "durationArray",
    "setDurationArray",
    "duration",
    "setDuration",
    "timeUnit",
    "seTimeUnit",
    "occurrence",
    "setOccurrence",
    "length",
    "i",
    "xs",
    "TextField",
    "label",
    "select",
    "defaultValue",
    "option",
    "MenuItem",
    "fullWidth",
    "flexFlow",
    "divider",
    "SurvivalCurveCalc",
    "setRows",
    "setDataSource",
    "disableChartButton",
    "setDisableChartButton",
    "enablePage",
    "setEnablePage",
    "setPeriods",
    "textInput",
    "useRef",
    "m",
    "inputRef",
    "current",
    "style",
    "Divider",
    "find",
    "o",
    "backgroundImage",
    "element",
    "margin",
    "LandingPage",
    "history",
    "useHistory",
    "minHeight",
    "padding",
    "endIcon",
    "MainPage",
    "logisticRegressionService",
    "checkStatus",
    "logisticRegressionFit",
    "logisticRegressionCalcCustom",
    "model",
    "modelId",
    "logisticRegressionCalcOwn",
    "CsvRegression",
    "unlockCustomModel",
    "loadingRegression",
    "setLoadingRegression",
    "loadingValidation",
    "setLoadingValidation",
    "refRegression",
    "refValidation",
    "disableValidation",
    "setDisableValidation",
    "index",
    "trim",
    "resObj",
    "nre",
    "setInterval",
    "r",
    "clearInterval",
    "setTimeout",
    "CircularProgress",
    "size",
    "formLong",
    "AddTestCase",
    "disableCustomModel",
    "loadingOwnModel",
    "setLoadingOwnModel",
    "loadingCustomModel",
    "setLoadingCustomModel",
    "refCalcOwn",
    "refCalcCustom",
    "estimatedLevel",
    "setEstimatedLevel",
    "schema",
    "yup",
    "shape",
    "Gender",
    "required",
    "Age",
    "typeError",
    "min",
    "Weight",
    "Height",
    "family_history_with_overweight",
    "FAVC",
    "FCVC",
    "NCP",
    "CAEC",
    "SMOKE",
    "CH2O",
    "SCC",
    "FAF",
    "TUE",
    "CALC",
    "MTRANS",
    "useForm",
    "resolver",
    "yupResolver",
    "register",
    "handleSubmit",
    "errors",
    "formState",
    "reset",
    "onSubmit",
    "buttonId",
    "nativeEvent",
    "submitter",
    "orderedJSON",
    "parse",
    "FormHelperText",
    "sx",
    "boxShadow",
    "bgcolor",
    "marginLeft",
    "LogisticRegressionCalc",
    "disableCustomModelTest",
    "setDisableCustomModelTest",
    "setModelId",
    "App",
    "timeout",
    "enter",
    "exit",
    "createBrowserHistory",
    "prevDepth",
    "calculatePathDepth",
    "location",
    "pathname",
    "filter",
    "n",
    "getPathDepth",
    "render",
    "TransitionGroup",
    "CSSTransition",
    "mountOnEnter",
    "unmountOnExit",
    "path",
    "exact",
    "reportWebVitals",
    "onPerfEntry",
    "Function",
    "getCLS",
    "getFID",
    "getFCP",
    "getLCP",
    "getTTFB",
    "createMuiTheme",
    "typography",
    "fontFamily",
    "join",
    "h1",
    "h2",
    "h3",
    "fontStyle",
    "fontVariant",
    "textTransform",
    "textDecoration",
    "h4",
    "h6",
    "default",
    "ReactDOM",
    "StrictMode",
    "ThemeProvider",
    "document",
    "getElementById"
  ],
  "mappings": "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",
  "file": "static/js/main.80c1bc63.chunk.js",
  "sourcesContent": [
    "import {\r\n    ArgumentAxis,\r\n    Chart,\r\n    CommonSeriesSettings,\r\n    Export,\r\n    Format,\r\n    Label,\r\n    Legend,\r\n    Point,\r\n    Series\r\n} from 'devextreme-react/chart';\r\nimport * as React from 'react';\r\nimport {Component} from 'react';\r\n\r\n\r\ninterface SurvivalCurveResult {\r\n    periodNumber: number,\r\n    quantity: number,\r\n    failures: number,\r\n    survivalProbability: number,\r\n    estimatorKM: number\r\n}\r\n\r\ninterface stepLineChartI {\r\n    data: SurvivalCurveResult[]\r\n}\r\n\r\nexport default class StepLineChart extends Component<stepLineChartI> {\r\n\r\n    render() {\r\n        console.log(this.props.data)\r\n        return (\r\n            <>\r\n                <Chart\r\n                    id=\"container\"\r\n                    dataSource={this.props.data}\r\n                    title=\"Kaplan-Meier survival curve\"\r\n                >\r\n                    <CommonSeriesSettings\r\n                        type=\"stepline\"\r\n                        argumentField=\"periodNumber\"\r\n                    >\r\n                        <Point visible={false}/>\r\n                    </CommonSeriesSettings>\r\n                    <Series key={'estimatorKM'} valueField={'estimatorKM'}\r\n                            name={'The likelihood of not having certain side effects'}\r\n                            color={'#FC7B09'}/>\r\n                    <ArgumentAxis>\r\n                        <Label>\r\n                            <Format type=\"decimal\"/>\r\n                        </Label>\r\n                    </ArgumentAxis>\r\n                    <Legend\r\n                        verticalAlignment=\"bottom\"\r\n                        horizontalAlignment=\"center\"\r\n                    />\r\n                    <Export enabled={true}/>\r\n                </Chart>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n",
    "import {TestingPerson} from \"../pages/survival-curve/SurvivalCurveCalc\";\r\n\r\n\r\nconst survivalCurveService = {\r\n\r\n/*    survivalResults: (periods: number, data: TestingPerson[]) => {\r\n        return fetch(`http://localhost:8080/estimator/${periods}`, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type': 'application/json; charset=utf-8',\r\n                \"Access-Control-Allow-Origin\": \"*\"\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n    },\r\n    checkCSVData: (periods: number, data: any[]) => {\r\n        return fetch(`http://localhost:8081/csv-data/validate/${periods}`, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type': 'application/json; charset=utf-8',\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n    },\r\n    survivalResultsCSV: (periods: number, data: any[]) => {\r\n        return fetch(`http://localhost:8081/csv-data/calc/${periods}`, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type': 'application/json; charset=utf-8',\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n    }*/\r\n    survivalResults: (periods: number, data: TestingPerson[]) => {\r\n        return fetch(`/survival-curve/estimator/${periods}`, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type': 'application/json; charset=utf-8',\r\n                \"Access-Control-Allow-Origin\": \"*\"\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n    },\r\n    checkCSVData: (periods: number, data: any[]) => {\r\n        return fetch(`/csv-validator/csv-data/validate/${periods}`, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type': 'application/json; charset=utf-8',\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n    },\r\n    survivalResultsCSV: (periods: number, data: any[]) => {\r\n        return fetch(`/csv-validator/csv-data/calc/${periods}`, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type': 'application/json; charset=utf-8',\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n    }\r\n\r\n};\r\n\r\nexport default survivalCurveService;\r\n",
    "import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport Button from '@material-ui/core/Button';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport green from '@material-ui/core/colors/green';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport {Theme, withStyles} from '@material-ui/core/styles';\r\nimport {makeStyles} from \"@material-ui/core\";\r\n\r\nconst variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    success: {\r\n        backgroundColor: theme.palette.success.main\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.main,\r\n    },\r\n    info: {\r\n        backgroundColor: '#21B8E2',\r\n    },\r\n    warning: {\r\n        backgroundColor: theme.palette.warning.main,\r\n    },\r\n    snackbarWidth: {\r\n        width: '20vw',\r\n        fontSize: 20\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: 1,\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nexport interface MySnackbarContentI {\r\n    variant: 'success' | 'warning' | 'error' | 'info',\r\n    onClose: () => void,\r\n    message: string\r\n}\r\n\r\nexport function SnackbarContentWrapper(props: MySnackbarContentI) {\r\n    const {message, onClose, variant, ...other} = props;\r\n    const Icon = variantIcon[variant];\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={classNames(classes[variant], classes.snackbarWidth)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\">\r\n          <Icon className={classNames(classes.icon, classes.iconVariant)}/>\r\n                    {message}\r\n        </span>\r\n            }\r\n            action={[\r\n                <IconButton\r\n                    key=\"close\"\r\n                    aria-label=\"Close\"\r\n                    color=\"inherit\"\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon className={classes.icon}/>\r\n                </IconButton>,\r\n            ]}\r\n            {...other}\r\n        />\r\n    );\r\n}\r\n",
    "import {Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\nimport * as React from \"react\";\r\n\r\ninterface resultsTableI {\r\n    data: any[]\r\n}\r\n\r\n\r\nexport function ResultsTable(props: resultsTableI){\r\n    return(\r\n        <>\r\n            <TableContainer component={Paper}>\r\n                <Table aria-label=\"customized table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"right\">Period number</TableCell>\r\n                            <TableCell align=\"right\">Number of observations</TableCell>\r\n                            <TableCell align=\"right\">Number of failures</TableCell>\r\n                            <TableCell align=\"right\">Survival probability</TableCell>\r\n                            <TableCell align=\"right\">Kaplan-Meier estimator</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {props.data.map((row) => (\r\n                            <TableRow key={row.periodNumber}>\r\n                                <TableCell component=\"th\" scope=\"row\">{row.periodNumber}</TableCell>\r\n                                <TableCell align=\"right\">{row.quantity}</TableCell>\r\n                                <TableCell align=\"right\">{row.failures}</TableCell>\r\n                                <TableCell align=\"right\">{row.survivalProbability}</TableCell>\r\n                                <TableCell align=\"right\">{row.estimatorKM}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </>\r\n    )\r\n}",
    "import * as React from \"react\";\r\nimport {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Grid,\r\n    Input,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    makeStyles,\r\n    Snackbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport KeyboardArrowRightSharpIcon from \"@mui/icons-material/KeyboardArrowRightSharp\";\r\nimport survivalCurveService from \"../../services/survivalCurveService\";\r\nimport {SnackbarContentWrapper} from \"../SnackbarContentWrapper\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    button: {\r\n        textAlign: 'center',\r\n        background: 'linear-gradient(45deg, #239890 30%, #47EEE3 90%)',\r\n        color: '#1a0000',\r\n        '&:hover': {\r\n            backgroundColor: '#A8AEAE',\r\n        },\r\n        marginTop: '10px',\r\n        marginBottom: '10px',\r\n        width: '20vh',\r\n        height: '5vh'\r\n    },\r\n    form: {\r\n        display: 'flex',\r\n        width: '10vw',\r\n    },\r\n}));\r\n\r\ninterface CsvReaderI {\r\n    submitData: (data: any[]) => void;\r\n    periods: number;\r\n}\r\n\r\nexport function CsvSurvivalCurve(props: CsvReaderI) {\r\n    const {submitData, periods} = props;\r\n    const [csvFile, setCsvFile] = useState<any[]>();\r\n    const [disableCheck, setDisableCheck] = useState<boolean>(true);\r\n    const [disableSubmit, setDisableSubmit] = useState<boolean>(true);\r\n    const classes = useStyles();\r\n    const [snackbarMsg, setSnackbarMsg] = useState<string>('');\r\n    const service = survivalCurveService;\r\n\r\n    useEffect(() => {\r\n        if (periods !== undefined && periods !== 0 && csvFile !== undefined) {\r\n            setDisableCheck(false);\r\n        }\r\n    })\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const file = event.target.files?.[0]\r\n        const reader = new FileReader();\r\n        const delim = ',';\r\n        const dataSet: any[] = []\r\n        reader.onload = function (e) {\r\n            const text = e.target?.result as string;\r\n            const rows = text.slice(text.indexOf('\\r\\n') + 2).split('\\r\\n').slice(0, -1);\r\n            if (!checkIfResultsNumbers(rows, delim)) {\r\n                setSnackbarMsg('Data in in columns are not numeric values')\r\n                setCsvFile(undefined);\r\n            } else {\r\n                rows.forEach((row: any) => {\r\n                    const values = row.split(delim);\r\n                    dataSet.push([Number(values[0]), Number(values[1])])\r\n                })\r\n                setCsvFile(dataSet);\r\n            }\r\n        }\r\n        if (file != undefined) {\r\n            reader.readAsText(file);\r\n        }\r\n    }\r\n\r\n    const checkCSVData = () => {\r\n        if (periods !== undefined && csvFile !== undefined) {\r\n            service.checkCSVData(periods, csvFile).then(res => {\r\n                if (res.ok) {\r\n                    return res.json()\r\n                } else {\r\n                    return Promise.reject(res.statusText);\r\n                }\r\n            }).then(data => {\r\n                if (data == false) {\r\n                    setSnackbarMsg('Entered CSV data are not correct, please check if period number in data are not bigger than declared periods and if occurrence is 0/1')\r\n                } else {\r\n                    setDisableSubmit(false)\r\n                    setSnackbarMsg('Your CSV is correct, you can click on generating chart')\r\n                }\r\n            }).catch(_ => {\r\n                setSnackbarMsg('Error occurred during connection to CSV validation server')\r\n            })\r\n        }\r\n    }\r\n\r\n    const submit = async () => {\r\n        if (periods !== undefined && csvFile !== undefined) {\r\n            service.survivalResultsCSV(periods, csvFile).then(async res => {\r\n                if (res.ok) {\r\n                    submitData(await res.json())\r\n                } else {\r\n                    res.text().then((errorMsg: any) => {\r\n                        setSnackbarMsg(errorMsg)\r\n                    })\r\n                }\r\n            })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                    setSnackbarMsg('Error occurred during connection to CSV validation server')\r\n                })\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setSnackbarMsg('')\r\n    }\r\n\r\n    function isNumber(value: string | number) {\r\n        return ((value != null) &&\r\n            (value !== '') &&\r\n            !isNaN(Number(value.toString())));\r\n    }\r\n\r\n    function checkIfResultsNumbers(resultFromFile: string[], delim: string): boolean {\r\n        let isNumeric = true;\r\n        resultFromFile.forEach(value => {\r\n            const values = value.split(delim);\r\n            if (!isNumber(values[0]) || !isNumber(values[1])) {\r\n                isNumeric = false;\r\n            }\r\n        })\r\n        return isNumeric;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container direction={\"row\"} spacing={10}>\r\n                <Grid item>\r\n                    <Box borderRadius={8}>\r\n                        <Typography variant=\"h1\" component=\"div\">\r\n                            Requirements for importing a CSV file\r\n                        </Typography>\r\n                        <List>\r\n                            <ListItem>\r\n                                <ListItemIcon>\r\n                                    <KeyboardArrowRightSharpIcon/>\r\n                                </ListItemIcon>\r\n                                <ListItemText\r\n                                    primary=\"The first column in the file corresponds to the time of the attempt\"/>\r\n                                <ListItemIcon>\r\n                                    <KeyboardArrowRightSharpIcon/>\r\n                                </ListItemIcon>\r\n                                <ListItemText\r\n                                    primary=\"The second column takes a value of 0 or 1 depending on whether the sample is cut (0) / successful (0) / failed (1)\"/>\r\n                                <ListItemIcon>\r\n                                    <KeyboardArrowRightSharpIcon/>\r\n                                </ListItemIcon>\r\n                                <ListItemText\r\n                                    primary=\"Column headers do not matter, the order of the respective columns counts\"/>\r\n                                <ListItemIcon>\r\n                                    <KeyboardArrowRightSharpIcon/>\r\n                                </ListItemIcon>\r\n                                <ListItemText\r\n                                    primary=\"Blank line must be appended to the end of the file\"/>\r\n                            </ListItem>\r\n                        </List>\r\n                    </Box>\r\n                </Grid>\r\n                <Box width=\"100%\"/>\r\n                <Grid item>\r\n                    <Input\r\n                        type='file'\r\n                        inputProps={{accept: '.csv'}}\r\n                        id='csvFile'\r\n                        onChange={handleChange}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container direction={\"row\"} spacing={10}>\r\n                <Grid item>\r\n                    <Button className={classes.button} variant='contained'\r\n                            disabled={disableCheck}\r\n                            onClick={checkCSVData}>\r\n                        Check CSV File\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button className={classes.button}\r\n                            variant='contained'\r\n                            disabled={disableSubmit}\r\n                            onClick={submit}>\r\n                        Generate chart base on CSV\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                }}\r\n                open={snackbarMsg != ''}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n            >\r\n                <SnackbarContentWrapper\r\n                    onClose={handleClose}\r\n                    variant=\"warning\"\r\n                    message={snackbarMsg}\r\n                />\r\n            </Snackbar>\r\n        </>\r\n\r\n    )\r\n}",
    "import {Box, Button, Grid, makeStyles, MenuItem, TextField, Typography} from '@material-ui/core';\r\nimport * as React from 'react';\r\nimport {useEffect, useState} from 'react';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    wrapper: {\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: '100vh', /*  height of this element is equal to 80% of the viewport height. */\r\n        display: 'flex',\r\n        align: 'center',\r\n    },\r\n\r\n    button: {\r\n        textAlign: 'center',\r\n        background: 'linear-gradient(45deg, #239890 30%, #47EEE3 90%)',\r\n        color: '#1a0000',\r\n        '&:hover': {\r\n            backgroundColor: '#A8AEAE',\r\n        },\r\n        marginTop: '10px',\r\n        marginBottom: '10px',\r\n        width: '40vh',\r\n        height: '3vh'\r\n    },\r\n    form: {\r\n        display: 'flex',\r\n        width: '20vw',\r\n    },\r\n}));\r\n\r\ninterface AddTestingPersonFormI {\r\n    adding: (duration: number, occurrence: boolean) => void;\r\n    periods: number;\r\n    deleting : () => void;\r\n}\r\n\r\nexport function AddingTestingPersonForm(props: AddTestingPersonFormI) {\r\n\r\n    const {adding, periods, deleting} = props;\r\n\r\n    const occurrenceArray = Array.from(Array(2).keys());\r\n    const timeUnits = [\"Miesiąc\", \"Dzień\", \"Rok\"]\r\n    const classes = useStyles();\r\n    const [durationArray, setDurationArray] = useState<number[]>();\r\n    const [duration, setDuration] = useState<number>();\r\n    const [timeUnit, seTimeUnit] = useState<string>();\r\n    const [occurrence, setOccurrence] = useState<boolean>();\r\n\r\n    useEffect(() => {\r\n        setDurationArray(Array.from({length: periods}, (_, i) => i + 1))\r\n        deleting()\r\n    }, [periods])\r\n\r\n    const addTestingPerson = () => {\r\n        if (duration !== undefined && occurrence !== undefined) {\r\n            adding(duration, occurrence);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid container direction={\"row\"} spacing={10}>\r\n                <Grid item xs={10}>\r\n                    <Box borderRadius={8}>\r\n                        <Typography variant=\"h1\" component=\"div\">\r\n                            If adding cases manually is your preferred option, please add them in pursuance of\r\n                            the form below\r\n                        </Typography>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item>\r\n                    <TextField\r\n                        id=\"outlined-start-adornment\"\r\n                        label=\"Time unit\"\r\n                        className={classes.form}\r\n                        select\r\n                        defaultValue={\"\"}\r\n                        onChange={event => {\r\n                            seTimeUnit(event.target.value.toString())\r\n                        }}\r\n                    >\r\n                        {timeUnits.map((option) => (\r\n                            <MenuItem key={option} value={option}>\r\n                                {option}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </TextField>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            {\r\n                !timeUnit !== undefined && durationArray !== undefined &&\r\n                <Grid container direction={\"row\"} spacing={10}>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"standard-select-currency\"\r\n                            className={classes.form}\r\n                            select\r\n                            label=\"Duration time\"\r\n                            defaultValue={''}\r\n                            onChange={event => {\r\n                                setDuration(Number(event.target.value))\r\n                            }}\r\n                        >\r\n                            {durationArray.map((option) => (\r\n                                <MenuItem key={option} value={option}>\r\n                                    {option}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"standard-select-currency\"\r\n                            select\r\n                            className={classes.form}\r\n                            label=\"Occurence\"\r\n                            defaultValue={''}\r\n                            onChange={event => {\r\n                                setOccurrence(event.target.value.toString() == '1')\r\n                            }}\r\n                        >\r\n                            {occurrenceArray.map((option) => (\r\n                                <MenuItem key={option} value={option}>\r\n                                    {option}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button variant='contained' className={classes.button} onClick={addTestingPerson} fullWidth>Add\r\n                            case</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            }\r\n\r\n        </>\r\n    );\r\n}\r\n",
    "import {Box, Button, makeStyles, Snackbar, Table, TableHead, TableRow, TextField, Typography} from '@material-ui/core';\r\nimport * as React from 'react';\r\nimport {useEffect, useRef, useState} from 'react';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport StepLineChart from './StepLineChart';\r\nimport survivalCurveService from \"../../services/survivalCurveService\";\r\nimport {SnackbarContentWrapper} from \"../SnackbarContentWrapper\";\r\nimport {ResultsTable} from \"./ResultsTable\";\r\nimport {CsvSurvivalCurve} from \"./CsvSurvivalCurve\";\r\nimport {AddingTestingPersonForm} from \"./AddingTestingPersonForm\";\r\nimport {Paper, TableBody, TableCell, TableContainer} from \"@mui/material\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    wrapper: {\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: '100vh', /*  height of this element is equal to 80% of the viewport height. */\r\n        display: 'flex',\r\n        align: 'center',\r\n        background: 'linear-gradient(45deg, #C9E7E7 30%, #E5ECEC 90%)'\r\n    },\r\n    button: {\r\n        textAlign: 'center',\r\n        background: 'linear-gradient(45deg, #239890 30%, #47EEE3 90%)',\r\n        color: '#1a0000',\r\n        '&:hover': {\r\n            backgroundColor: '#A8AEAE',\r\n        },\r\n        marginTop: '10px',\r\n        width: '20vh',\r\n        height: '3vh'\r\n    },\r\n    form: {\r\n        display: 'flex',\r\n        flexFlow: 'column',\r\n        height: '30%',\r\n        width: '20vh',\r\n        marginBottom: '20px',\r\n    },\r\n    divider: {\r\n        marginBottom: '20px'\r\n    }\r\n}));\r\n\r\nexport interface TestingPerson {\r\n    id: number,\r\n    duration: number,\r\n    occurrence: boolean\r\n}\r\n\r\nexport function SurvivalCurveCalc() {\r\n\r\n    const [rows, setRows] = useState<TestingPerson[]>([]);\r\n    const [dataSource, setDataSource] = useState<any[]>([]);\r\n    const [disableChartButton, setDisableChartButton] = useState<boolean>(true)\r\n    const [enablePage, setEnablePage] = useState<boolean>(false)\r\n    const [periods, setPeriods] = useState<number>(0);\r\n    let textInput = useRef<HTMLInputElement>();\r\n    const service = survivalCurveService;\r\n    const [snackbarMsg, setSnackbarMsg] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        if (rows.length !== 0 && periods !== 0) {\r\n            setDisableChartButton(false)\r\n        }\r\n    })\r\n\r\n    const handleClose = () => {\r\n        setSnackbarMsg('')\r\n    }\r\n\r\n    const savePeriods = () => {\r\n        if(textInput.current != undefined){\r\n            setPeriods(Number(textInput.current.value))\r\n            setEnablePage(true)\r\n            setSnackbarMsg('Total duration is successfully saved')\r\n        }\r\n\r\n    }\r\n\r\n    const addingNewPerson = (duration: number, occurrence: boolean) => {\r\n        setRows([...rows, {id: rows.length, duration: duration, occurrence: occurrence}]);\r\n    };\r\n\r\n    const deletingAllPersons = () => {\r\n        setRows([])\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    const checkRows = () => {\r\n        const isMaximumCasePresent = rows.find((o) => o.duration === periods);\r\n        if (!isMaximumCasePresent) {\r\n            return false\r\n        } else {\r\n            return true\r\n        }\r\n    }\r\n\r\n    const generateChart = () => {\r\n        if (checkRows()) {\r\n            service.survivalResults(periods, rows).then(async res => {\r\n                if (res.ok) {\r\n                    setDataSource(await res.json())\r\n                } else {\r\n                    setSnackbarMsg(\"Some error occurred during connection to backend\")\r\n                }\r\n            }).catch(() => {\r\n                setSnackbarMsg(\"Connection to backend server refused\")\r\n            })\r\n        } else {\r\n            setSnackbarMsg(\"Please enter test case with duration equals declared total duration\")\r\n        }\r\n\r\n    };\r\n\r\n    const submitDataSource = (data: any[]) => {\r\n        setDataSource(data);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Box m={20}>\r\n                <Typography variant=\"h1\" component=\"div\">\r\n                    Before deciding which method of adding data you will use, please specify the total time duration.\r\n                </Typography>\r\n                <TextField\r\n                    id=\"outlined-name\"\r\n                    className={classes.form}\r\n                    inputRef={textInput}\r\n                    label=\"Total duration\"\r\n                />\r\n                <Button variant='contained' className={classes.button} onClick={savePeriods} style={{marginBottom: '10px'}}>Save</Button>\r\n                <Divider className={classes.divider}/>\r\n                {\r\n                    enablePage &&\r\n                    <>\r\n                        <CsvSurvivalCurve submitData={submitDataSource} periods={periods}/>\r\n                        <Divider className={classes.divider}/>\r\n                        <AddingTestingPersonForm\r\n                            adding={addingNewPerson}\r\n                            deleting={deletingAllPersons}\r\n                            periods={periods}/>\r\n                        <TableContainer component={Paper}>\r\n                            <Table aria-label=\"customized table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>ID</TableCell>\r\n                                        <TableCell align=\"right\">Time of the trial</TableCell>\r\n                                        <TableCell align=\"right\">The occurrence of the trial</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {rows.map((row) => (\r\n                                        <TableRow key={row.id}>\r\n                                            <TableCell component=\"th\" scope=\"row\">{row.id}</TableCell>\r\n                                            <TableCell align=\"right\">{row.duration}</TableCell>\r\n                                            <TableCell align=\"right\">{row.occurrence ? '1' : '0'}</TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                        <Button variant='contained' className={classes.button} onClick={generateChart}\r\n                                disabled={disableChartButton}>\r\n                            Generate chart\r\n                        </Button>\r\n                    </>\r\n                }\r\n\r\n                <Snackbar\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    open={snackbarMsg != ''}\r\n                    autoHideDuration={6000}\r\n                    onClose={handleClose}\r\n                >\r\n                    <SnackbarContentWrapper\r\n                        onClose={handleClose}\r\n                        variant=\"warning\"\r\n                        message={snackbarMsg}\r\n                    />\r\n                </Snackbar>\r\n\r\n                {\r\n                    dataSource.length !== 0 &&\r\n                    <>\r\n                        <StepLineChart data={dataSource}/>\r\n                        <ResultsTable data={dataSource}/>\r\n                    </>\r\n                }\r\n            </Box>\r\n        </>\r\n    );\r\n}\r\n",
    "import {Button, Grid, makeStyles, Typography} from '@material-ui/core';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\r\nimport * as React from \"react\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    wrapper: {\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: '100vh', /*  height of this element is equal to 80% of the viewport height. */\r\n        display: 'flex',\r\n        align: 'center',\r\n        backgroundImage: `url(${\"../static/image.jpg\"})`,\r\n        //background: 'linear-gradient(45deg, #C9E7E7 30%, #E5ECEC 90%)'\r\n    },\r\n    button: {\r\n        textAlign: 'center',\r\n        background: 'linear-gradient(45deg, #667275 30%, #d9d7d7 90%)',\r\n        color: '#f5fcfc',\r\n        '&:hover': {\r\n            backgroundColor: '#A8AEAE',\r\n        },\r\n        width: '20vw',\r\n        height: '5vh'\r\n    },\r\n    element: {\r\n        margin: '20px'\r\n    }\r\n}));\r\n\r\nexport function LandingPage() {\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const routeChange = () => {\r\n        history.push('/main-page');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid\r\n                container\r\n                spacing={0}\r\n                direction=\"column\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n                style={{\r\n                    minHeight: '100vh',\r\n                    background: 'linear-gradient(45deg, #C9E7E7 30%, #E5ECEC 90%)',\r\n                    padding: '30px'\r\n                }}\r\n            >\r\n                <Grid item>\r\n                    <Typography variant=\"h3\" component=\"div\" className={classes.element}>\r\n                        Welcome in application\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Typography variant=\"h4\" component=\"div\" className={classes.element}>\r\n                        At the time of application development (11.2021) calculations connected\r\n                        to survival curve and obesity level based on logistic regression are available. Please click\r\n                        button below to enter\r\n                        application.\r\n                    </Typography>\r\n                </Grid>\r\n                    <Grid item>\r\n                        <Button variant='contained' className={classes.button} onClick={routeChange}\r\n                                endIcon={<ArrowForwardIcon/>}>Enter app</Button>\r\n                    </Grid>\r\n                </Grid>\r\n        </>\r\n    );\r\n}\r\n",
    "import {Button, Grid, makeStyles, Typography} from '@material-ui/core';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport * as React from \"react\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    wrapper: {\r\n        /*        alignItems: 'center',\r\n                justifyContent: 'space-between',\r\n                height: '100vh', /!*  height of this element is equal to 80% of the viewport height. *!/\r\n                display: 'flex',\r\n                align: 'center',*/\r\n        background: 'linear-gradient(45deg, #C9E7E7 30%, #E5ECEC 90%)',\r\n        /*        marginRight: '50px',\r\n                marginLeft: '50px'*/\r\n    },\r\n    button: {\r\n        textAlign: 'center',\r\n        background: 'linear-gradient(45deg, #667275 30%, #d9d7d7 90%)',\r\n        color: '#FFFFFF',\r\n        '&:hover': {\r\n            backgroundColor: '#A8AEAE',\r\n        },\r\n        margin: '20px',\r\n        width: '20vw',\r\n        height: '5vh'\r\n    },\r\n    element: {\r\n        margin: '30px'\r\n    }\r\n}));\r\n\r\nexport function MainPage() {\r\n\r\n    const classes = useStyles()\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.wrapper}>\r\n                <Grid\r\n                    container\r\n                    spacing={0}\r\n                    direction=\"column\"\r\n                    alignItems=\"center\"\r\n                    justifyContent=\"center\"\r\n                    style={{minHeight: '100vh'}}\r\n                >\r\n                    <Grid item>\r\n                        <Typography variant=\"h3\" component=\"div\" className={classes.element}>\r\n                            Select calculation\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button variant='contained' className={classes.button} onClick={() => {\r\n                            history.push(\"/calc/survival-curve\");\r\n                        }}>survival curve</Button>\r\n                        <Button variant='contained' className={classes.button} onClick={() => {\r\n                            history.push(\"/calc/logistic-regression\");\r\n                        }}>Obesity level with logistic regression</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n\r\n}\r\n",
    "\r\nconst logisticRegressionService = {\r\n\r\n    checkCSVData: (data: any[]) => {\r\n        return fetch('/message-sender/validation', {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type': 'application/json; charset=utf-8',\r\n                \"Access-Control-Allow-Origin\": \"*\"\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n    },\r\n    checkStatus: (id: string | number) => {\r\n        return fetch(`/message-sender/validation/status/${id}`, {\r\n            method: 'GET',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type': 'application/json; charset=utf-8',\r\n                \"Access-Control-Allow-Origin\": \"*\"\r\n            },\r\n        })\r\n    },\r\n    logisticRegressionFit: (data: any[]) => {\r\n        return fetch('/message-sender/logistic-regression', {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type': 'application/json; charset=utf-8',\r\n                \"Access-Control-Allow-Origin\": \"*\"\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n    },\r\n    logisticRegressionCalcCustom: (data: any, model: string, modelId: string) => {\r\n        return fetch('/message-sender/logistic-regression/calc/custom', {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type': 'application/json; charset=utf-8',\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                \"Model\": model,\r\n                \"ModelId\": modelId\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n    },\r\n    logisticRegressionCalcOwn: (data: any, model: string) => {\r\n        return fetch('/message-sender/logistic-regression/calc/own', {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type': 'application/json; charset=utf-8',\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                \"Model\": model,\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n    }\r\n\r\n    /* checkCSVData: (data: any[]) => {\r\n         return fetch('http://localhost:5000/validation', {\r\n             method: 'POST',\r\n             mode: 'cors',\r\n             headers: {\r\n                 'Content-Type': 'application/json; charset=utf-8',\r\n                 \"Access-Control-Allow-Origin\": \"*\"\r\n             },\r\n             body: JSON.stringify(data)\r\n         })\r\n     },\r\n     checkStatus: (id: string | number) => {\r\n         return fetch(`http://localhost:5000/validation/status/${id}`, {\r\n             method: 'GET',\r\n             mode: 'cors',\r\n             headers: {\r\n                 'Content-Type': 'application/json; charset=utf-8',\r\n                 \"Access-Control-Allow-Origin\": \"*\"\r\n             },\r\n         })\r\n     },\r\n     logisticRegressionFit: (data: any[]) => {\r\n         return fetch('http://localhost:5000/logistic-regression', {\r\n             method: 'POST',\r\n             mode: 'cors',\r\n             headers: {\r\n                 'Content-Type': 'application/json; charset=utf-8',\r\n                 \"Access-Control-Allow-Origin\": \"*\"\r\n             },\r\n             body: JSON.stringify(data)\r\n         })\r\n     },\r\n     logisticRegressionCalcCustom: (data: any, model: string, modelId: string) => {\r\n         return fetch('http://localhost:5000/logistic-regression/calc/custom', {\r\n             method: 'POST',\r\n             mode: 'cors',\r\n             headers: {\r\n                 'Content-Type': 'application/json; charset=utf-8',\r\n                 \"Access-Control-Allow-Origin\": \"*\",\r\n                 \"Model\": model,\r\n                 \"ModelId\": modelId\r\n             },\r\n             body: JSON.stringify(data)\r\n         })\r\n     },\r\n     logisticRegressionCalcOwn: (data: any, model: string) => {\r\n         return fetch('http://localhost:5000/logistic-regression/calc/own', {\r\n             method: 'POST',\r\n             mode: 'cors',\r\n             headers: {\r\n                 'Content-Type': 'application/json; charset=utf-8',\r\n                 \"Access-Control-Allow-Origin\": \"*\",\r\n                 \"Model\": model,\r\n             },\r\n             body: JSON.stringify(data)\r\n         })\r\n     }*/\r\n};\r\n\r\n\r\nexport default logisticRegressionService;\r\n",
    "import * as React from \"react\";\r\nimport {ChangeEvent, useEffect, useRef, useState} from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    CircularProgress,\r\n    Grid,\r\n    Input,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    makeStyles,\r\n    Snackbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport KeyboardArrowRightSharpIcon from \"@mui/icons-material/KeyboardArrowRightSharp\";\r\nimport {SnackbarContentWrapper} from \"../SnackbarContentWrapper\";\r\nimport logisticRegressionService from \"../../services/logisticRegressionService\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    button: {\r\n        textAlign: 'center',\r\n        background: 'linear-gradient(45deg, #239890 30%, #47EEE3 90%)',\r\n        color: '#1a0000',\r\n        '&:hover': {\r\n            backgroundColor: '#A8AEAE',\r\n        },\r\n        marginTop: '10px',\r\n        marginBottom: '10px',\r\n        width: '20vh',\r\n        height: '5vh'\r\n    },\r\n    form: {\r\n        display: 'flex',\r\n        width: '10vw',\r\n    },\r\n}));\r\n\r\ninterface CsvRegressionI {\r\n    unlockCustomModel: (id: string) => void;\r\n}\r\n\r\nexport function CsvRegression(props: CsvRegressionI) {\r\n\r\n    const {unlockCustomModel} = props\r\n    const [csvFile, setCsvFile] = useState<any[]>();\r\n    const [loadingRegression, setLoadingRegression] = useState<boolean>(false)\r\n    const [loadingValidation, setLoadingValidation] = useState<boolean>(false);\r\n    const refRegression = useRef(loadingRegression);\r\n    const refValidation = useRef(loadingValidation);\r\n    const [disableValidation, setDisableValidation] = useState<boolean>(true);\r\n    const classes = useStyles();\r\n    const service = logisticRegressionService;\r\n    const [snackbarMsg, setSnackbarMsg] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        refRegression.current = loadingRegression\r\n        refValidation.current = loadingValidation\r\n        if (csvFile !== undefined) {\r\n            setDisableValidation(false)\r\n        }\r\n    })\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const file = event.target.files?.[0]\r\n        const reader = new FileReader();\r\n        const delim = ',';\r\n        const dataSet: any[] = []\r\n        reader.onload = function (e) {\r\n            const text = e.target?.result as string;\r\n            const rows = text.slice(text.indexOf('\\r\\n') + 2).split('\\r\\n').slice(0, -1);\r\n            rows.forEach((row: any, index: number) => {\r\n                const values = row.split(delim);\r\n                dataSet.push([\r\n                    values[0].trim(), values[1].trim(), values[2].trim(), values[3].trim(), values[4].trim(), values[5].trim(), values[6].trim(), values[7].trim(),\r\n                    values[8].trim(), values[9].trim(), values[10].trim(), values[11].trim(), values[12].trim(), values[13].trim(), values[14].trim(), values[15].trim(), values[16].trim()\r\n                ])\r\n            })\r\n            setCsvFile(dataSet)\r\n        }\r\n        if (file != undefined) {\r\n            reader.readAsText(file);\r\n        }\r\n    }\r\n\r\n    const checkCSVData = () => {\r\n        setLoadingValidation(true)\r\n        if (csvFile !== undefined) {\r\n            service.checkCSVData(csvFile).then(res => {\r\n                return res.json().then(resObj => {\r\n                    var nre = setInterval(() => {\r\n                        checkStatus(resObj['id_msg'])\r\n                    }, 5000);\r\n                    const checkStatus = async (id: string) => {\r\n                        console.log(\"ID \" + id)\r\n                        let res = await service.checkStatus(id)\r\n                        let r = await res.json()\r\n                        if (refValidation.current) {\r\n                            if (r['result'] == 'success') {\r\n                                setLoadingValidation(false)\r\n                                clearInterval(nre)\r\n                                setSnackbarMsg('CSV file is correct')\r\n                            } else if (r['result'] == 'fail') {\r\n                                clearInterval(nre)\r\n                                setSnackbarMsg('CSV file is not correct. Please consider to check if all requirements are met')\r\n                                setLoadingValidation(false)\r\n                            }\r\n                        }\r\n                    }\r\n                    setTimeout(function () {\r\n                        if (refValidation.current) {\r\n                            clearInterval(nre);\r\n                            setSnackbarMsg('Some problems occurred during validation, please try again later')\r\n                        }\r\n                    }, 200000)\r\n                })\r\n            }).catch(_ => {\r\n                setSnackbarMsg('Connection with backend service cannot be established')\r\n                setLoadingValidation(false)\r\n            })\r\n        }\r\n    }\r\n\r\n    const submit = () => {\r\n        setLoadingRegression(true)\r\n        if (csvFile !== undefined) {\r\n            service.logisticRegressionFit(csvFile).then(res => {\r\n                return res.json().then(async resObj => {\r\n                    const nre = setInterval(() => {\r\n                        checkStatus(resObj['id_msg'])\r\n                    }, 5000);\r\n                    const checkStatus = async (id: string) => {\r\n                        console.log(\"ID \" + id)\r\n                        let res = await service.checkStatus(id)\r\n                        let r = await res.json()\r\n                        if (refRegression.current) {\r\n                            if (r['result'] == 'fail') {\r\n                                if (r['stage'] == 'validation') {\r\n                                    setSnackbarMsg('Something is wrong with CSV validation')\r\n                                } else {\r\n                                    setSnackbarMsg('Logistic regression calculation failed')\r\n                                }\r\n                                setLoadingRegression(false)\r\n                                clearInterval(nre)\r\n                            } else if (r['result'] == 'success' && r['stage'] == 'regression') {\r\n                                setSnackbarMsg(`Logistic regression was successful. Your model's accuracy is ${r['accuracy']} `)\r\n                                unlockCustomModel(id)\r\n                                clearInterval(nre)\r\n                                setLoadingRegression(false)\r\n                            }\r\n                        }\r\n                    }\r\n                    setTimeout(() => {\r\n                        if (refRegression.current) {\r\n                            setSnackbarMsg('Some problems occurred during process, please try again later ')\r\n                            setLoadingRegression(false)\r\n                            clearInterval(nre)\r\n                        }\r\n                    }, 200000)\r\n                })\r\n            }).catch(_ => {\r\n                setSnackbarMsg('Connection with backend service cannot be established')\r\n                setLoadingRegression(false)\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    const handleClose = () => {\r\n        setSnackbarMsg('')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container direction={\"row\"} spacing={10}>\r\n                <Grid item>\r\n                    <Typography variant=\"h1\" component=\"div\">\r\n                        Requirements for importing a CSV file\r\n                    </Typography>\r\n                    <List>\r\n                        <ListItem>\r\n                            <ListItemIcon>\r\n                                <KeyboardArrowRightSharpIcon/>\r\n                            </ListItemIcon>\r\n                            <ListItemText\r\n                                primary=\"Blank line must be appended to the end of the file\"/>\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemIcon>\r\n                                <KeyboardArrowRightSharpIcon/>\r\n                            </ListItemIcon>\r\n                            <ListItemText\r\n                                primary=\"Specific headers must be placed: Gender, Age, Height, Weight, family_history_with_overweight, FAVC(frequently consuming of high caloric food), FCVC(Frequency of consumption of vegetables), NCP(number of main meals), CAEC(consumption of food between meals),\r\n                                    SMOKE, CH2O(water of daily), SCC(calories consumption monitoring), FAF(physical activity frequency), TUE(time using technology devices), CALC, MTRANS(way of transport), NObeyesdad(obesity level)\"\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemIcon>\r\n                                <KeyboardArrowRightSharpIcon/>\r\n                            </ListItemIcon>\r\n                            <ListItemText\r\n                                style={{fontSize: 5}}\r\n                                primary=\"Specific requirements for columns: Gender(Female/Male), Age(num.), Height(num.), Weight(num.), family_history_with_overweight(yes/no), FAVC(yes/no), FCVC(num.), NCP(num.), CAEC(no/Sometimes/Frequently/Always),\r\n                                    SMOKE(yes/no), CH2O(num.), SCC(yes/no), FAF(num.), TUE(num.), CALC(no/Sometimes/Frequently/Always), MTRANS(Automobile/Motorbike/Bike/Public_Transportation/Walking), NObeyesdad(Insufficient_Weight/Normal_Weight/Overweight_Level_I/Overweight_Level_II/Obesity_Type_I/Obesity_Type_II/Obesity_Type_III)\"/>\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Box width=\"100%\"/>\r\n                <Grid item>\r\n                    <Input\r\n                        type='file'\r\n                        inputProps={{accept: '.csv'}}\r\n                        id='csvFile'\r\n                        onChange={handleChange}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container direction={\"row\"} spacing={10}>\r\n                <Grid item>\r\n                    <Button variant='contained' className={classes.button}\r\n                            disabled={disableValidation || loadingValidation}\r\n                            onClick={checkCSVData}>\r\n                        {loadingValidation && <CircularProgress size={16}/>}\r\n                        Check CSV File\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button variant='contained' className={classes.button} onClick={submit}\r\n                            disabled={loadingRegression || disableValidation}>\r\n                        {loadingRegression && <CircularProgress size={16}/>}\r\n                        Upload logistic regression model\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                }}\r\n                open={snackbarMsg != ''}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n            >\r\n                <SnackbarContentWrapper\r\n                    onClose={handleClose}\r\n                    variant=\"warning\"\r\n                    message={snackbarMsg}\r\n                />\r\n            </Snackbar>\r\n        </>\r\n\r\n    )\r\n}",
    "import {\r\n    Button,\r\n    CircularProgress,\r\n    FormHelperText,\r\n    Grid,\r\n    makeStyles,\r\n    MenuItem,\r\n    Snackbar,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport * as React from \"react\";\r\nimport {BaseSyntheticEvent, useEffect, useRef, useState} from \"react\";\r\nimport Box from '@mui/material/Box';\r\nimport {SubmitHandler, useForm} from \"react-hook-form\";\r\nimport * as yup from \"yup\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport logisticRegressionService from \"../../services/logisticRegressionService\";\r\nimport {SnackbarContentWrapper} from \"../SnackbarContentWrapper\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    wrapper: {\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: '100vh', /*  height of this element is equal to 80% of the viewport height. */\r\n        display: 'flex',\r\n        align: 'center',\r\n    },\r\n    button: {\r\n        textAlign: 'center',\r\n        background: 'linear-gradient(45deg, #239890 30%, #47EEE3 90%)',\r\n        color: '#1a0000',\r\n        '&:hover': {\r\n            backgroundColor: '#A8AEAE',\r\n        },\r\n        marginTop: '10px',\r\n        marginBottom: '10px',\r\n        width: '20vh',\r\n        height: '5vh'\r\n    },\r\n    form: {\r\n        display: 'flex',\r\n        width: '10vw',\r\n    },\r\n    formLong: {\r\n        display: 'flex',\r\n        width: '13vw',\r\n    },\r\n}));\r\n\r\ninterface AddTestCaseI {\r\n    disableCustomModel: boolean,\r\n    modelId: string | undefined\r\n}\r\n\r\nexport function AddTestCase(props: AddTestCaseI) {\r\n\r\n    const classes = useStyles()\r\n    const {disableCustomModel, modelId} = props;\r\n    const service = logisticRegressionService\r\n    const gender = ['Female', 'Male']\r\n    const family_history_with_overweight = ['yes', 'no']\r\n    const FAVC = ['yes', 'no']\r\n    const CAEC = ['NO', 'Sometimes', 'Frequently', 'Always']\r\n    const SMOKE = ['yes', 'no']\r\n    const SCC = ['yes', 'no']\r\n    const CALC = ['NO', 'Sometimes', 'Frequently', 'Always']\r\n    const MTRANS = ['Automobile', 'Motorbike', 'Bike', 'Public_Transportation', 'Walking']\r\n    const [loadingOwnModel, setLoadingOwnModel] = useState<boolean>(false)\r\n    const [loadingCustomModel, setLoadingCustomModel] = useState<boolean>(false)\r\n    const refCalcOwn = useRef(loadingOwnModel)\r\n    const refCalcCustom = useRef(loadingCustomModel)\r\n    const [estimatedLevel, setEstimatedLevel] = useState<string>('')\r\n    const [snackbarMsg, setSnackbarMsg] = useState<string>('')\r\n    const schema = yup.object().shape({\r\n        Gender: yup.string().required(),\r\n        Age: yup.number()\r\n            .typeError('age must be a number')\r\n            .required(\"age is required\")\r\n            .min(0, \"age cannot be less than 0\"),\r\n        Weight: yup.number()\r\n            .typeError('weight must be a number')\r\n            .required(\"weight is required\")\r\n            .min(0, \"weight cannot be less than 0\"),\r\n        Height: yup.number().required()\r\n            .typeError('height must be a number')\r\n            .required(\"height is required\")\r\n            .min(0, \"height cannot be less than 0\"),\r\n        family_history_with_overweight: yup.string().required(),\r\n        FAVC: yup.string().required(),\r\n        FCVC: yup.string().required(),\r\n        NCP: yup.number().required()\r\n            .typeError('NCP must be a number')\r\n            .required(\"NCP is required\")\r\n            .min(0, \"NCP value cannot be less than 0\"),\r\n        CAEC: yup.string().required(),\r\n        SMOKE: yup.string().required(),\r\n        CH2O: yup.number().required()\r\n            .typeError('CH2O must be a number')\r\n            .required(\"CH2O is required\")\r\n            .min(0, \"CH2O value cannot be less than 0\"),\r\n        SCC: yup.string().required(),\r\n        FAF: yup.number().required()\r\n            .typeError('FAF must be a number')\r\n            .required(\"FAF is required\")\r\n            .min(0, \"FAF value cannot be less than 0\"),\r\n        TUE: yup.number().required()\r\n            .typeError('TUE must be a number')\r\n            .required(\"TUE is required\")\r\n            .min(0, \"TUE value cannot be less than 0\"),\r\n        CALC: yup.string().required(),\r\n        MTRANS: yup.string().required(),\r\n    })\r\n\r\n    const {register, handleSubmit, formState: {errors}, reset} = useForm({\r\n        resolver: yupResolver(schema),\r\n    });\r\n\r\n    const handleClose = () => {\r\n        setSnackbarMsg('')\r\n    }\r\n\r\n    useEffect(() => {\r\n        refCalcOwn.current = loadingOwnModel\r\n        refCalcCustom.current = loadingCustomModel\r\n    })\r\n\r\n    const onSubmit: SubmitHandler<any> = (data, event: BaseSyntheticEvent | undefined) => {\r\n        const submitEvent = event?.nativeEvent as SubmitEvent\r\n        const buttonId = submitEvent.submitter?.id\r\n        console.log(buttonId)\r\n        const orderedJSON = JSON.parse(JSON.stringify(data, [\"Gender\", \"Age\", \"Height\", \"Weight\", \"family_history_with_overweight\", \"FAVC\", \"FCVC\", \"NCP\", \"CAEC\",\r\n            \"SMOKE\", \"CH2O\", \"SCC\", \"FAF\", \"TUE\", \"CALC\", \"MTRANS\"]));\r\n        orderedJSON['Height'] = orderedJSON['Height'] / 100\r\n        if (buttonId == 'ourModel') {\r\n            setLoadingOwnModel(true)\r\n            service.logisticRegressionCalcOwn(orderedJSON, 'own').then(res => {\r\n                return res.json().then(resObj => {\r\n                    var nre = setInterval(() => {\r\n                        checkStatus(resObj['id_msg'])\r\n                    }, 4000);\r\n                    const checkStatus = async (id: string | number) => {\r\n                        console.log(\"ID test case\" + id)\r\n                        let res = await service.checkStatus(id)\r\n                        let r = await res.json()\r\n                        if (refCalcOwn.current) {\r\n                            if (r['result'] == 'success') {\r\n                                setSnackbarMsg('Logistic regression calculation finished')\r\n                                setEstimatedLevel(r['estimation'])\r\n                                setLoadingOwnModel(false)\r\n                                clearInterval(nre)\r\n                            } else if (r['result'] == 'fail') {\r\n                                clearInterval(nre)\r\n                                setSnackbarMsg('Logistic regression calculation failed, please try again later')\r\n                                setLoadingOwnModel(false)\r\n                            }\r\n                        }\r\n                    }\r\n                    setTimeout(function () {\r\n                        if (refCalcOwn.current) {\r\n                            clearInterval(nre);\r\n                            setSnackbarMsg('Some problems occurred during calculation. Probably it is problem with our server. Please try again later')\r\n                            setLoadingOwnModel(false)\r\n                        }\r\n                    }, 200000)\r\n                })\r\n            }).catch(_ => {\r\n                setSnackbarMsg('Connection with backend service cannot be established')\r\n                setLoadingOwnModel(false)\r\n            })\r\n        } else if (buttonId == 'customModel' && modelId !== undefined) {\r\n            setLoadingCustomModel(true)\r\n            service.logisticRegressionCalcCustom(orderedJSON, 'custom', modelId).then(res => {\r\n                return res.json().then(resObj => {\r\n                    var nre = setInterval(() => {\r\n                        checkStatus(resObj['id_msg'])\r\n                    }, 4000);\r\n                    const checkStatus = async (id: string | number) => {\r\n                        console.log(\"ID test case\" + id)\r\n                        let res = await service.checkStatus(id)\r\n                        let r = await res.json()\r\n                        if (refCalcCustom.current) {\r\n                            if (r['result'] == 'success') {\r\n                                setSnackbarMsg('Logistic regression calculation finished')\r\n                                setEstimatedLevel(r['estimation'])\r\n                                setLoadingCustomModel(false)\r\n                                clearInterval(nre)\r\n                            } else if (r['result'] == 'fail') {\r\n                                clearInterval(nre)\r\n                                setSnackbarMsg('Logistic regression calculation failed, please try again later')\r\n                                setLoadingCustomModel(false)\r\n                            }\r\n                        }\r\n                    }\r\n                    setTimeout(function () {\r\n                        if (refCalcCustom.current) {\r\n                            clearInterval(nre);\r\n                            setSnackbarMsg('Some problems occurred during calculation. Probably it is problem with our server. Please try again later')\r\n                            setLoadingCustomModel(false)\r\n                        }\r\n                    }, 200000)\r\n                })\r\n            }).catch(_ => {\r\n                setSnackbarMsg('Connection with backend service cannot be established')\r\n                setLoadingCustomModel(false)\r\n            })\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container direction={\"row\"} spacing={10}>\r\n                <Grid item xs={10}>\r\n                    <Box borderRadius={8}>\r\n                        <Typography variant=\"h1\" component=\"div\">\r\n                            Please complete test case with proper values.\r\n                        </Typography>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid container direction={\"row\"} spacing={10}>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"outlined-start-adornment\"\r\n                            label=\"Gender\"\r\n                            className={classes.form}\r\n                            select\r\n                            {...register(\"Gender\")}\r\n                        >\r\n                            {gender.map((option) => (\r\n                                <MenuItem key={option} value={option}>\r\n                                    {option}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                        <FormHelperText error>{errors.Gender?.message}</FormHelperText>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            {...register(\"Age\")}\r\n                            id=\"outlined-start-adornment\"\r\n                            label=\"Age\"\r\n                            className={classes.form}\r\n                            type=\"number\"\r\n                        >\r\n                        </TextField>\r\n                        <FormHelperText error>{errors.Age?.message}</FormHelperText>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"outlined-start-adornment\"\r\n                            label=\"Height [cm]\"\r\n                            className={classes.form}\r\n                            type=\"number\"\r\n                            {...register(\"Height\")}\r\n                        >\r\n                        </TextField>\r\n                        <FormHelperText error>{errors.Height?.message}</FormHelperText>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"outlined-start-adornment\"\r\n                            label=\"Weight\"\r\n                            {...register(\"Weight\")}\r\n                            className={classes.form}\r\n                            type=\"number\"\r\n                        >\r\n                        </TextField>\r\n                        <FormHelperText error>{errors.Weight?.message}</FormHelperText>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"outlined-start-adornment\"\r\n                            label=\"Family history with overweight\"\r\n                            className={classes.formLong}\r\n                            select\r\n                            {...register(\"family_history_with_overweight\")}\r\n                        >\r\n                            {family_history_with_overweight.map((option) => (\r\n                                <MenuItem key={option} value={option}>\r\n                                    {option}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                        <FormHelperText error>{errors.family_history_with_overweight?.message}</FormHelperText>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"outlined-start-adornment\"\r\n                            label=\"FAVC\"\r\n                            className={classes.form}\r\n                            select\r\n                            {...register(\"FAVC\")}\r\n                        >\r\n                            {FAVC.map((option) => (\r\n                                <MenuItem key={option} value={option}>\r\n                                    {option}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                        <FormHelperText error>{errors.FAVC?.message}</FormHelperText>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"outlined-start-adornment\"\r\n                            label=\"FCVC\"\r\n                            className={classes.form}\r\n                            {...register(\"FCVC\")}\r\n                            type=\"number\"\r\n                        >\r\n                        </TextField>\r\n                        <FormHelperText error>{errors.FCVC?.message}</FormHelperText>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container direction={\"row\"} spacing={10}>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"outlined-start-adornment\"\r\n                            label=\"NCP\"\r\n                            {...register(\"NCP\")}\r\n                            className={classes.form}\r\n                            type=\"number\"\r\n                        >\r\n                        </TextField>\r\n                        <FormHelperText error>{errors.NCP?.message}</FormHelperText>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"outlined-start-adornment\"\r\n                            label=\"CAEC\"\r\n                            className={classes.form}\r\n                            select\r\n                            {...register(\"CAEC\")}\r\n                        >\r\n                            {CAEC.map((option) => (\r\n                                <MenuItem key={option} value={option}>\r\n                                    {option}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                        <FormHelperText error>{errors.CAEC?.message}</FormHelperText>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"outlined-start-adornment\"\r\n                            label=\"SMOKE\"\r\n                            className={classes.form}\r\n                            select\r\n                            {...register(\"SMOKE\")}\r\n                        >\r\n                            {SMOKE.map((option) => (\r\n                                <MenuItem key={option} value={option}>\r\n                                    {option}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                        <FormHelperText error>{errors.SMOKE?.message}</FormHelperText>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"outlined-start-adornment\"\r\n                            label=\"CH2O\"\r\n                            className={classes.form}\r\n                            type=\"number\"\r\n                            {...register(\"CH2O\")}\r\n                        >\r\n                        </TextField>\r\n                        <FormHelperText error>{errors.CH2O?.message}</FormHelperText>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"outlined-start-adornment\"\r\n                            label=\"SCC\"\r\n                            className={classes.form}\r\n                            select\r\n                            {...register(\"SCC\")}\r\n                        >\r\n                            {SCC.map((option) => (\r\n                                <MenuItem key={option} value={option}>\r\n                                    {option}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                        <FormHelperText error>{errors.SCC?.message}</FormHelperText>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"outlined-start-adornment\"\r\n                            label=\"FAF\"\r\n                            className={classes.form}\r\n                            type=\"number\"\r\n                            {...register(\"FAF\")}\r\n                        >\r\n                        </TextField>\r\n                        <FormHelperText error>{errors.FAF?.message}</FormHelperText>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"outlined-start-adornment\"\r\n                            label=\"TUE\"\r\n                            className={classes.form}\r\n                            {...register(\"TUE\")}\r\n                            type=\"number\"\r\n                        >\r\n                        </TextField>\r\n                        <FormHelperText error>{errors.TUE?.message}</FormHelperText>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container direction={\"row\"} spacing={10}>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"outlined-start-adornment\"\r\n                            label=\"CALC\"\r\n                            className={classes.form}\r\n                            select\r\n                            {...register(\"CALC\")}\r\n                        >\r\n                            {CALC.map((option) => (\r\n                                <MenuItem key={option} value={option}>\r\n                                    {option}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                        <FormHelperText error>{errors.CALC?.message}</FormHelperText>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"outlined-start-adornment\"\r\n                            label=\"MTRANS\"\r\n                            className={classes.form}\r\n                            select\r\n                            {...register(\"MTRANS\")}\r\n                        >\r\n                            {MTRANS.map((option) => (\r\n                                <MenuItem key={option} value={option}>\r\n                                    {option}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                        <FormHelperText error>{errors.MTRANS?.message}</FormHelperText>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container direction={\"row\"} spacing={10}>\r\n                    <Grid item>\r\n                        <Button\r\n                            variant='contained'\r\n                            id=\"ourModel\"\r\n                            type=\"submit\"\r\n                            className={classes.button}\r\n                            disabled={loadingOwnModel}>\r\n                            {loadingOwnModel && <CircularProgress size={16}/>}\r\n                            Calculate with our model\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button\r\n                            variant='contained'\r\n                            id=\"customModel\"\r\n                            type=\"submit\"\r\n                            className={classes.button}\r\n                            disabled={loadingCustomModel || disableCustomModel}>\r\n                            {loadingCustomModel && <CircularProgress size={16}/>}\r\n                            Calculate with custom model</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n            {\r\n                estimatedLevel !== '' &&\r\n                <Box\r\n                    sx={{\r\n                        boxShadow: 1,\r\n                        bgcolor: 'background.paper',\r\n                        marginLeft: '30px',\r\n                        margin: '20px',\r\n                        width: '80vw',\r\n                        height: '5vh',\r\n                        alignItems: 'center', // po środku wertykalnie\r\n                        justifyContent: 'center', // po środku horyzontalnie\r\n                        display: 'flex' //flex kontenery\r\n                    }}\r\n                >\r\n                    <Typography variant=\"h2\" align={'center'} style={{margin: '5px'}}>\r\n                        {`Estimated level of obesity based on eating habits and physical condition is `}\r\n                    </Typography>\r\n                    <Typography variant=\"h6\">\r\n                        {` ${estimatedLevel}`}\r\n                    </Typography>\r\n\r\n                </Box>\r\n            }\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                }}\r\n                open={snackbarMsg != ''}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n            >\r\n                <SnackbarContentWrapper\r\n                    onClose={handleClose}\r\n                    variant=\"warning\"\r\n                    message={snackbarMsg}\r\n                />\r\n            </Snackbar>\r\n        </>\r\n    )\r\n}",
    "import {CsvRegression} from \"./CsvRegression\";\r\nimport * as React from \"react\";\r\nimport {useState} from \"react\";\r\nimport {Box, makeStyles} from \"@material-ui/core\";\r\nimport {AddTestCase} from \"./AddTestCase\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    wrapper: {\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: '100vh', /*  height of this element is equal to 80% of the viewport height. */\r\n        display: 'flex',\r\n        align: 'center',\r\n    },\r\n\r\n    button: {\r\n        textAlign: 'center',\r\n        background: 'linear-gradient(45deg, #239890 30%, #47EEE3 90%)',\r\n        color: '#1a0000',\r\n        '&:hover': {\r\n            backgroundColor: '#A8AEAE',\r\n        },\r\n        marginTop: '10px',\r\n        marginBottom: '10px',\r\n        width: '40vh',\r\n        height: '3vh'\r\n    },\r\n    form: {\r\n        display: 'flex',\r\n        width: '20vw',\r\n    },\r\n}));\r\n\r\nexport function LogisticRegressionCalc() {\r\n\r\n    const classes = useStyles();\r\n    const [disableCustomModelTest, setDisableCustomModelTest] = useState<boolean>(true);\r\n    const [modelId, setModelId] = useState<string>()\r\n\r\n    const unlockCustomModel = (id: string) => {\r\n        setDisableCustomModelTest(false);\r\n        setModelId(id)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Box m={20}>\r\n                <CsvRegression unlockCustomModel={unlockCustomModel}></CsvRegression>\r\n                <AddTestCase disableCustomModel={disableCustomModelTest} modelId={modelId}></AddTestCase>\r\n            </Box>\r\n        </>\r\n    );\r\n}",
    "import {createBrowserHistory} from 'history';\r\nimport React from 'react';\r\nimport {Route, Router, Switch} from 'react-router-dom';\r\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\r\nimport {SurvivalCurveCalc} from '../src/pages/survival-curve/SurvivalCurveCalc';\r\nimport {LandingPage} from '../src/pages/startingPages/LandingPage';\r\nimport {MainPage} from '../src/pages/startingPages/MainPage';\r\nimport './page-transitions/slideTransition.css';\r\nimport {LogisticRegressionCalc} from \"./pages/logistic-regression/LogisticRegressionCalc\";\r\n\r\nfunction App() {\r\n\r\n    const timeout = {enter: 800, exit: 500};\r\n\r\n    const history = createBrowserHistory();\r\n    let prevDepth = calculatePathDepth(history.location);\r\n\r\n    function calculatePathDepth(location: any) {\r\n        return location.pathname.split('/').filter((n: any) => n !== '').length;\r\n    }\r\n\r\n    function getPathDepth() {\r\n        let result: boolean = calculatePathDepth(history.location) - prevDepth >= 0;\r\n        prevDepth = calculatePathDepth(history.location);\r\n        return result;\r\n    }\r\n\r\n    return (\r\n        <Router history={history}>\r\n            <Route render={() =>\r\n                <TransitionGroup>\r\n                    <CSSTransition key={history.location.pathname.split('/')[1]} timeout={timeout}\r\n                                   classNames={getPathDepth() ? 'pageSliderLeft' : 'pageSliderRight'}\r\n                                   mountOnEnter={true}\r\n                                   unmountOnExit={true}>\r\n                        <Switch location={history.location}>\r\n                            <Route path=\"/\" exact component={LandingPage}/>\r\n                            <Route path=\"/main-page\" component={MainPage}/>\r\n                            <Route path=\"/calc/survival-curve\" component={SurvivalCurveCalc}/>\r\n                            <Route path=\"/calc/logistic-regression\" component={LogisticRegressionCalc}/>\r\n\r\n                        </Switch>\r\n                    </CSSTransition>\r\n                </TransitionGroup>\r\n            }/>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n",
    "import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n",
    "import {createMuiTheme} from '@material-ui/core/styles';\r\nimport {ThemeProvider} from '@material-ui/styles';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst theme = createMuiTheme({\r\n    spacing: 3,\r\n    typography: {\r\n        fontSize: 19,\r\n        fontFamily: [\r\n            'Palatino',\r\n            'URW Palladio L',\r\n            'serif',\r\n        ].join(','),\r\n        h1: {\r\n            fontSize: 20,\r\n            fontFamily: 'Palatino',\r\n        },\r\n        h2: {\r\n            fontSize: 23,\r\n            fontFamily: 'Palatino',\r\n        },\r\n        h3: {\r\n            fontSize: 60,\r\n            fontFamily: 'Palatino',\r\n            fontStyle: 'italic',\r\n            color: '#68636F',\r\n            fontVariant: 'small-caps',\r\n            textTransform: 'capitalize',\r\n            textDecoration: 'none solid rgb(68, 68, 68)'\r\n        },\r\n        h4: {\r\n            fontSize: 25,\r\n            fontFamily: 'Palatino',\r\n            fontStyle: 'italic',\r\n            color: '#68636F',\r\n            textDecoration: 'none solid rgb(68, 68, 68)'\r\n        },\r\n        h6: {\r\n            fontSize: 23,\r\n            fontFamily: 'Palatino',\r\n            fontStyle: 'italic'\r\n\r\n        }\r\n    },\r\n    palette: {\r\n        background: {\r\n            default: '#31A4A9'\r\n        },\r\n        primary: {\r\n            main: '#153435',//indigo\r\n        },\r\n        error: {\r\n            main: '#D72A2A',//red\r\n        },\r\n        warning: {\r\n            main: '#FC7B09',//orange\r\n        },\r\n        success: {\r\n            main: '#09FE00',//green\r\n        },\r\n        text: {\r\n            primary: '#000000',//black\r\n        },\r\n    },\r\n});\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <ThemeProvider theme={theme}>\r\n            <App/>\r\n        </ThemeProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"
  ],
  "sourceRoot": ""
}